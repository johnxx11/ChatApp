{"ast":null,"code":"export default function checkDuplicateRouteNames(state){var duplicates=[];var getRouteNames=function getRouteNames(location,state){state.routes.forEach(function(route){var _route$state,_route$state$routeNam;var currentLocation=location?location+\" > \"+route.name:route.name;(_route$state=route.state)===null||_route$state===void 0?void 0:(_route$state$routeNam=_route$state.routeNames)===null||_route$state$routeNam===void 0?void 0:_route$state$routeNam.forEach(function(routeName){if(routeName===route.name){duplicates.push([currentLocation,currentLocation+\" > \"+route.name]);}});if(route.state){getRouteNames(currentLocation,route.state);}});};getRouteNames('',state);return duplicates;}","map":{"version":3,"sources":["checkDuplicateRouteNames.tsx"],"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","currentLocation","name","routeNames","routeName","push"],"mappings":"AAEA,cAAe,SAASA,yBAAT,CAAkCC,KAAlC,CAA0D,CACvE,GAAMC,WAAsB,CAAG,EAA/B,CAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,CACpBC,QADoB,CAEpBH,KAFoB,CAGjB,CACHA,KAAK,CAACI,MAANJ,CAAaK,OAAbL,CAAsBM,SAAAA,KAA6B,CAAK,CAAA,GAAA,aAAA,CAAA,qBAAA,CACtD,GAAMC,gBAAe,CAAGJ,QAAQ,CACzBA,QADyB,OACXG,KAAK,CAACE,IADK,CAE5BF,KAAK,CAACE,IAFV,CAIA,CAAA,YAAA,CAAA,KAAK,CAACR,KAAN,IAAW,IAAX,EAAW,YAAA,GAAA,IAAA,EAAX,CAAW,IAAA,EAAX,CAAW,CAAA,qBAAA,CAAX,YAAA,CAAaS,UAAF,IAAY,IAAZ,EAAY,qBAAA,GAAA,IAAA,EAAZ,CAAY,IAAA,EAAZ,CAAX,qBAAA,CAAyBJ,OAAzB,CAAkCK,SAAAA,SAAS,CAAK,CAC9C,GAAIA,SAAS,GAAKJ,KAAK,CAACE,IAAxB,CAA8B,CAC5BP,UAAU,CAACU,IAAXV,CAAgB,CACdM,eADc,CAEXA,eAFW,OAEUD,KAAK,CAACE,IAFhB,CAAhBP,EAIF,CACD,CAPD,CAAA,CASA,GAAIK,KAAK,CAACN,KAAV,CAAiB,CACfE,aAAa,CAACK,eAAD,CAAkBD,KAAK,CAACN,KAAxB,CAAbE,CACF,CACD,CAjBDF,EAkBD,CAtBD,CAwBAE,aAAa,CAAC,EAAD,CAAKF,KAAL,CAAbE,CAEA,MAAOD,WAAP,CACF","sourceRoot":"../../src","sourcesContent":["export default function checkDuplicateRouteNames(state) {\n  const duplicates = [];\n  const getRouteNames = (location, state) => {\n    state.routes.forEach(route => {\n      var _route$state, _route$state$routeNam;\n      const currentLocation = location ? `${location} > ${route.name}` : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(routeName => {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, `${currentLocation} > ${route.name}`]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}\n//# sourceMappingURL=checkDuplicateRouteNames.js.map"]},"metadata":{},"sourceType":"module"}