{"ast":null,"code":"import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import ServerContext from\"./ServerContext\";export default React.forwardRef(function ServerContainer(_ref,ref){var children=_ref.children,location=_ref.location;React.useEffect(function(){console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);var current={};if(ref){var value={getCurrentOptions:function getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return React.createElement(ServerContext.Provider,{value:{location:location}},React.createElement(CurrentRenderContext.Provider,{value:current},children));});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","children","location","ref","useEffect","console","error","current","value","getCurrentOptions","options"],"mappings":"AAAA,OAASA,oBAAT,KAAqC,wBAArC,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,cAAP,uBAcA,cAAeD,MAAK,CAACE,UAANF,CAAiB,QAASG,gBAAT,CAAwB,IAAxB,CAE9BG,GAF8B,CAG9B,CAFA,GAAEF,SAAF,CAA6B,IAA7B,CAAEA,QAAF,CAAYC,QAAZ,CAA6B,IAA7B,CAAYA,QAAZ,CAGAL,KAAK,CAACO,SAANP,CAAgB,UAAM,CACpBQ,OAAO,CAACC,KAARD,CACE,sFADFA,EAGD,CAJDR,CAIG,EAJHA,EAMA,GAAMU,QAA6B,CAAG,EAAtC,CAEA,GAAIJ,GAAJ,CAAS,CACP,GAAMK,MAAK,CAAG,CACZC,iBADY,6BACQ,CAClB,MAAOF,QAAO,CAACG,OAAf,CACF,CAHY,CAAd,CAUA,GAAI,MAAOP,IAAP,GAAe,UAAnB,CAA+B,CAC7BA,GAAG,CAACK,KAAD,CAAHL,CACD,CAFD,IAEO,CAELA,GAAG,CAACI,OAAJJ,CAAcK,KAAdL,CACF,CACF,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,CAAuB,CAAC,KAAK,CAAE,CAAED,QAAAA,CAAAA,QAAF,CAAR,CAAvB,CACE,KAAA,CAAA,aAAA,CAAC,oBAAoB,CAAC,QAAtB,CAA8B,CAAC,KAAK,CAAEK,OAAR,CAA9B,CACGN,QADH,CADF,CADF,CAOD,CAtCcJ,CAAf","sourceRoot":"../../src","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default /*#__PURE__*/React.forwardRef(function ServerContainer(_ref, ref) {\n  let {\n    children,\n    location\n  } = _ref;\n  React.useEffect(() => {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  const current = {};\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n  return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n    value: {\n      location\n    }\n  }, /*#__PURE__*/React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n//# sourceMappingURL=ServerContainer.js.map"]},"metadata":{},"sourceType":"module"}