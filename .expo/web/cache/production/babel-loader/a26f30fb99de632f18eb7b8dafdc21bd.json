{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from\"./findFocusedRoute\";import validatePathConfig from\"./validatePathConfig\";export default function getStateFromPath(path,options){var _ref;if(options){validatePathConfig(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,_toConsumableArray(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return Object.assign(acc,_defineProperty({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return _objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(){if(!config.regex){return\"continue\";}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return Object.assign(acc,_defineProperty({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return\"break\";}};for(var config of configs){var _config$pattern;var _ret=_loop();if(_ret===\"continue\")continue;if(_ret===\"break\")break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern2;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,_toConsumableArray(parentScreens),(_pattern2=_pattern)!=null?_pattern2:parentPattern);configs.push.apply(configs,_toConsumableArray(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':escape(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:_toConsumableArray(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var config of initialRoutes){if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","paths","p","matchedParams","params","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};\n//# sourceMappingURL=getStateFromPath.js.map"]},"metadata":{},"sourceType":"module"}