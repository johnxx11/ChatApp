{"ast":null,"code":"import*as React from'react';import NavigationContext from\"./NavigationContext\";export default function useFocusEvents(_ref){var state=_ref.state,emitter=_ref.emitter;var navigation=React.useContext(NavigationContext);var lastFocusedKeyRef=React.useRef();var currentFocusedKey=state.routes[state.index].key;React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('focus',function(){lastFocusedKeyRef.current=currentFocusedKey;emitter.emit({type:'focus',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('blur',function(){lastFocusedKeyRef.current=undefined;emitter.emit({type:'blur',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){var lastFocusedKey=lastFocusedKeyRef.current;lastFocusedKeyRef.current=currentFocusedKey;if(lastFocusedKey===undefined&&!navigation){emitter.emit({type:'focus',target:currentFocusedKey});}if(lastFocusedKey===currentFocusedKey||!(navigation?navigation.isFocused():true)){return;}if(lastFocusedKey===undefined){return;}emitter.emit({type:'blur',target:lastFocusedKey});emitter.emit({type:'focus',target:currentFocusedKey});},[currentFocusedKey,emitter,navigation]);}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"mappings":"AACA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,kBAAP,2BAYA,cAAe,SAASC,eAAT,CAAuB,IAAvB,CAGI,CAHmD,GACpEC,MADoE,CAGrD,IAHqD,CACpEA,KADoE,CAEpEC,OAFoE,CAGrD,IAHqD,CAEpEA,OAFoE,CAIpE,GAAMC,WAAU,CAAGL,KAAK,CAACM,UAANN,CAAiBC,iBAAjBD,CAAnB,CACA,GAAMO,kBAAiB,CAAGP,KAAK,CAACQ,MAANR,EAA1B,CAEA,GAAMS,kBAAiB,CAAGN,KAAK,CAACO,MAANP,CAAaA,KAAK,CAACQ,KAAnBR,EAA0BS,GAApD,CAIAZ,KAAK,CAACa,SAANb,CACE,iBACEK,WAAU,GAAA,IAAVA,EAAAA,UAAU,GAAA,IAAA,EAAVA,CAAU,IAAA,EAAVA,CAAAA,UAAU,CAAES,WAAZT,CAAwB,OAAxBA,CAAiC,UAAM,CACrCE,iBAAiB,CAACQ,OAAlBR,CAA4BE,iBAA5BF,CACAH,OAAO,CAACY,IAARZ,CAAa,CAAEa,IAAI,CAAE,OAAR,CAAiBC,MAAM,CAAET,iBAAzB,CAAbL,EACD,CAHDC,CADF,EADFL,CAME,CAACS,iBAAD,CAAoBL,OAApB,CAA6BC,UAA7B,CANFL,EASAA,KAAK,CAACa,SAANb,CACE,iBACEK,WAAU,GAAA,IAAVA,EAAAA,UAAU,GAAA,IAAA,EAAVA,CAAU,IAAA,EAAVA,CAAAA,UAAU,CAAES,WAAZT,CAAwB,MAAxBA,CAAgC,UAAM,CACpCE,iBAAiB,CAACQ,OAAlBR,CAA4BY,SAA5BZ,CACAH,OAAO,CAACY,IAARZ,CAAa,CAAEa,IAAI,CAAE,MAAR,CAAgBC,MAAM,CAAET,iBAAxB,CAAbL,EACD,CAHDC,CADF,EADFL,CAME,CAACS,iBAAD,CAAoBL,OAApB,CAA6BC,UAA7B,CANFL,EASAA,KAAK,CAACa,SAANb,CAAgB,UAAM,CACpB,GAAMoB,eAAc,CAAGb,iBAAiB,CAACQ,OAAzC,CAEAR,iBAAiB,CAACQ,OAAlBR,CAA4BE,iBAA5BF,CAIA,GAAIa,cAAc,GAAKD,SAAnBC,EAAgC,CAACf,UAArC,CAAiD,CAC/CD,OAAO,CAACY,IAARZ,CAAa,CAAEa,IAAI,CAAE,OAAR,CAAiBC,MAAM,CAAET,iBAAzB,CAAbL,EACF,CAIA,GACEgB,cAAc,GAAKX,iBAAnBW,EACA,EAAEf,UAAU,CAAGA,UAAU,CAACgB,SAAXhB,EAAH,CAA4B,IAAxC,CAFF,CAGE,CACA,OACF,CAEA,GAAIe,cAAc,GAAKD,SAAvB,CAAkC,CAEhC,OACF,CAEAf,OAAO,CAACY,IAARZ,CAAa,CAAEa,IAAI,CAAE,MAAR,CAAgBC,MAAM,CAAEE,cAAxB,CAAbhB,EACAA,OAAO,CAACY,IAARZ,CAAa,CAAEa,IAAI,CAAE,OAAR,CAAiBC,MAAM,CAAET,iBAAzB,CAAbL,EACD,CA3BDJ,CA2BG,CAACS,iBAAD,CAAoBL,OAApB,CAA6BC,UAA7B,CA3BHL,EA4BF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents(_ref) {\n  let {\n    state,\n    emitter\n  } = _ref;\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef();\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', () => {\n    lastFocusedKeyRef.current = currentFocusedKey;\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', () => {\n    lastFocusedKeyRef.current = undefined;\n    emitter.emit({\n      type: 'blur',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n//# sourceMappingURL=useFocusEvents.js.map"]},"metadata":{},"sourceType":"module"}