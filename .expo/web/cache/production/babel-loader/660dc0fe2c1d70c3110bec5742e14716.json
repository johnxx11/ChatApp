{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";var _stateToPropMappings;function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import UIManager from\"react-native-web/dist/exports/UIManager\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import deepEqual from'lodash/isEqual';import RNGestureHandlerModule from\"../RNGestureHandlerModule\";import{State}from\"../State\";import{handlerIDToTag,getNextHandlerTag,registerOldGestureHandler}from\"./handlersRegistry\";import{filterConfig,findNodeHandle,scheduleFlushOperations}from\"./gestureHandlerCommon\";import{isFabric,isJestEnv,tagMessage}from\"../utils\";import{ActionType}from\"../ActionType\";import{PressabilityDebugView}from\"./PressabilityDebugView\";var UIManagerAny=UIManager;var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=_objectSpread({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},isFabric()&&Platform.OS==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerAny.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&Platform.OS==='android';if(DEV_ON_ANDROID){DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},_defineProperty2(_stateToPropMappings,State.UNDETERMINED,undefined),_defineProperty2(_stateToPropMappings,State.BEGAN,'onBegan'),_defineProperty2(_stateToPropMappings,State.FAILED,'onFailed'),_defineProperty2(_stateToPropMappings,State.CANCELLED,'onCancelled'),_defineProperty2(_stateToPropMappings,State.ACTIVE,'onActivated'),_defineProperty2(_stateToPropMappings,State.END,'onEnded'),_stateToPropMappings);var UNRESOLVED_REFS_RETRY_LIMIT=1;export default function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){_inherits(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;_classCallCheck(this,Handler);_this=_super.call(this,props);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"config\",void 0);_defineProperty(_assertThisInitialized(_this),\"propsRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewNode\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"updateEnqueued\",null);_defineProperty(_assertThisInitialized(_this),\"inspectorToggleListener\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_assertThisInitialized(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_assertThisInitialized(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_assertThisInitialized(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(Platform.OS==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{registerOldGestureHandler(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6;if((_this$props5=_this.props)!==null&&_this$props5!==void 0&&_this$props5.onGestureEvent&&'current'in _this.props.onGestureEvent){return ActionType.REANIMATED_WORKLET;}else if((_this$props6=_this.props)!==null&&_this$props6!==void 0&&_this$props6.onGestureEvent&&'__isNative'in _this.props.onGestureEvent){return ActionType.NATIVE_ANIMATED_EVENT;}else{return ActionType.JS_FUNCTION_OLD_API;}}();RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}scheduleFlushOperations();});_defineProperty(_assertThisInitialized(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);scheduleFlushOperations();});_this.handlerTag=getNextHandlerTag();_this.config={};_this.propsRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;if(DEV_ON_ANDROID){this.inspectorToggleListener=DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){this.updateEnqueued=setImmediate(function(){_this2.updateEnqueued=null;_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();RNGestureHandlerModule.dropGestureHandler(this.handlerTag);scheduleFlushOperations();if(this.updateEnqueued){clearImmediate(this.updateEnqueued);}var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(remainingTries){var _this3=this;var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){this.updateEnqueued=setImmediate(function(){_this3.updateEnqueued=null;_this3.update(remainingTries-1);});}else{var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;var gestureEventHandler=this.onGestureHandlerEvent;var _this$props7=this.props,onGestureEvent=_this$props7.onGestureEvent,onGestureHandlerEvent=_this$props7.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props8=this.props,onHandlerStateChange=_this$props8.onHandlerStateChange,onGestureHandlerStateChange=_this$props8.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error(tagMessage(name+\" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));}var grandChildren=child.props.children;if(__DEV__&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread(_objectSpread({ref:this.refHandler,collapsable:false},isJestEnv()?{handlerType:name,handlerTag:this.handlerTag}:{}),{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);return Handler;}","map":{"version":3,"sources":["createHandler.tsx"],"names":["UIManagerAny","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","extract","refs","Array","r","props","stateToPropMappings","State","UNRESOLVED_REFS_RETRY_LIMIT","allowedProps","config","customNativeProps","React","constructor","getNextHandlerTag","handlerIDToTag","componentDidMount","_","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","scheduleFlushOperations","clearImmediate","handlerID","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","ActionType","registerOldGestureHandler","onGestureEvent","onGestureStateChange","actionType","update","remainingTries","deepEqual","setNativeProps","mergedProps","updates","render","gestureEventHandler","gestureStateEventHandler","onHandlerStateChange","events","undefined","tagMessage","grandChildren","hitSlop","collapsable","isJestEnv","handlerType","handlerTag","testID"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}