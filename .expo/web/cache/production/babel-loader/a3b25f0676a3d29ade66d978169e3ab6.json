{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useOnRouteFocus(_ref){var router=_ref.router,getState=_ref.getState,sourceRouteKey=_ref.key,setState=_ref.setState;var _React$useContext=React.useContext(NavigationBuilderContext),onRouteFocusParent=_React$useContext.onRouteFocus;return React.useCallback(function(key){var state=getState();var result=router.getStateForRouteFocus(state,key);if(result!==state){setState(result);}if(onRouteFocusParent!==undefined&&sourceRouteKey!==undefined){onRouteFocusParent(sourceRouteKey);}},[getState,onRouteFocusParent,router,setState,sourceRouteKey]);}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","key","sourceRouteKey","setState","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"mappings":"AAKA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,yBAAP,kCAcA,cAAe,SAASC,gBAAT,CAAwB,IAAxB,CAKK,CALqD,GACvEC,OADuE,CAKvD,IALuD,CACvEA,MADuE,CAEvEC,QAFuE,CAKvD,IALuD,CAEvEA,QAFuE,CAGlEE,cAHkE,CAKvD,IALuD,CAGvED,GAHuE,CAIvEE,QAJuE,CAKvD,IALuD,CAIvEA,QAJuE,CAMvE,sBAA6CP,KAAK,CAACU,UAANV,CAC3CC,wBAD2CD,CAA7C,CAAsBS,kBAAtB,mBAAQD,YAAR,CAIA,MAAOR,MAAK,CAACW,WAANX,CACJK,SAAAA,GAAW,CAAK,CACf,GAAMO,MAAK,CAAGR,QAAQ,EAAtB,CACA,GAAMS,OAAM,CAAGV,MAAM,CAACW,qBAAPX,CAA6BS,KAA7BT,CAAoCE,GAApCF,CAAf,CAEA,GAAIU,MAAM,GAAKD,KAAf,CAAsB,CACpBL,QAAQ,CAACM,MAAD,CAARN,CACF,CAEA,GAAIE,kBAAkB,GAAKM,SAAvBN,EAAoCH,cAAc,GAAKS,SAA3D,CAAsE,CACpEN,kBAAkB,CAACH,cAAD,CAAlBG,CACF,CACD,CAZIT,CAaL,CAACI,QAAD,CAAWK,kBAAX,CAA+BN,MAA/B,CAAuCI,QAAvC,CAAiDD,cAAjD,CAbKN,CAAP,CAeF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus(_ref) {\n  let {\n    router,\n    getState,\n    key: sourceRouteKey,\n    setState\n  } = _ref;\n  const {\n    onRouteFocus: onRouteFocusParent\n  } = React.useContext(NavigationBuilderContext);\n  return React.useCallback(key => {\n    const state = getState();\n    const result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}\n//# sourceMappingURL=useOnRouteFocus.js.map"]},"metadata":{},"sourceType":"module"}