{"ast":null,"code":"import React from'react';import{isExperimentalWebImplementationEnabled}from\"./EnableExperimentalWebImplementation\";import InteractionManager from\"./web/tools/InteractionManager\";import NodeManager from\"./web/tools/NodeManager\";import PanGestureHandler from\"./web/handlers/PanGestureHandler\";import TapGestureHandler from\"./web/handlers/TapGestureHandler\";import LongPressGestureHandler from\"./web/handlers/LongPressGestureHandler\";import PinchGestureHandler from\"./web/handlers/PinchGestureHandler\";import RotationGestureHandler from\"./web/handlers/RotationGestureHandler\";import FlingGestureHandler from\"./web/handlers/FlingGestureHandler\";import NativeViewGestureHandler from\"./web/handlers/NativeViewGestureHandler\";import ManualGestureHandler from\"./web/handlers/ManualGestureHandler\";import*as HammerNodeManager from\"./web_hammer/NodeManager\";import HammerNativeViewGestureHandler from\"./web_hammer/NativeViewGestureHandler\";import HammerPanGestureHandler from\"./web_hammer/PanGestureHandler\";import HammerTapGestureHandler from\"./web_hammer/TapGestureHandler\";import HammerLongPressGestureHandler from\"./web_hammer/LongPressGestureHandler\";import HammerPinchGestureHandler from\"./web_hammer/PinchGestureHandler\";import HammerRotationGestureHandler from\"./web_hammer/RotationGestureHandler\";import HammerFlingGestureHandler from\"./web_hammer/FlingGestureHandler\";export var Gestures={NativeViewGestureHandler:NativeViewGestureHandler,PanGestureHandler:PanGestureHandler,TapGestureHandler:TapGestureHandler,LongPressGestureHandler:LongPressGestureHandler,PinchGestureHandler:PinchGestureHandler,RotationGestureHandler:RotationGestureHandler,FlingGestureHandler:FlingGestureHandler,ManualGestureHandler:ManualGestureHandler};export var HammerGestures={NativeViewGestureHandler:HammerNativeViewGestureHandler,PanGestureHandler:HammerPanGestureHandler,TapGestureHandler:HammerTapGestureHandler,LongPressGestureHandler:HammerLongPressGestureHandler,PinchGestureHandler:HammerPinchGestureHandler,RotationGestureHandler:HammerRotationGestureHandler,FlingGestureHandler:HammerFlingGestureHandler};export default{handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(isExperimentalWebImplementationEnabled()){if(!(handlerName in Gestures)){throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");}var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),config);}else{if(!(handlerName in HammerGestures)){throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");}var _GestureClass=HammerGestures[handlerName];HammerNodeManager.createGestureHandler(handlerTag,new _GestureClass());}this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_actionType,propsRef){if(!(newView instanceof HTMLElement||newView instanceof React.Component)){return;}if(isExperimentalWebImplementationEnabled()){NodeManager.getHandler(handlerTag).init(newView,propsRef);}else{HammerNodeManager.getHandler(handlerTag).setView(newView,propsRef);}},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){if(isExperimentalWebImplementationEnabled()){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),newConfig);}else{HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);}},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){if(isExperimentalWebImplementationEnabled()){return NodeManager.getHandler(handlerTag);}else{return HammerNodeManager.getHandler(handlerTag);}},dropGestureHandler:function dropGestureHandler(handlerTag){if(isExperimentalWebImplementationEnabled()){NodeManager.dropGestureHandler(handlerTag);}else{HammerNodeManager.dropGestureHandler(handlerTag);}},flushOperations:function flushOperations(){}};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","ManualGestureHandler","HammerGestures","HammerFlingGestureHandler","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","isExperimentalWebImplementationEnabled","handlerName","GestureClass","NodeManager","InteractionManager","HammerNodeManager","attachGestureHandler","newView","React","updateGestureHandler","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}