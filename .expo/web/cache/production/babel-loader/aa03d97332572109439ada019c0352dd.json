{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{Platform}from'expo-modules-core';import path from'path-browserify';import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import URL from'url-parse';import AssetSourceResolver from\"./AssetSourceResolver\";import{manifestBaseUrl,getManifest,getManifest2}from\"./PlatformUtils\";var assetMapOverride=getManifest().assetMapOverride;export function selectAssetSource(meta){var _manifest2$extra,_manifest2$extra$expo;if(assetMapOverride&&assetMapOverride.hasOwnProperty(meta.hash)){meta=_objectSpread(_objectSpread({},meta),assetMapOverride[meta.hash]);}var scale=AssetSourceResolver.pickScale(meta.scales,PixelRatio.get());var index=meta.scales.findIndex(function(s){return s===scale;});var hash=meta.fileHashes?meta.fileHashes[index]||meta.fileHashes[0]:meta.hash;var uri=meta.fileUris?meta.fileUris[index]||meta.fileUris[0]:meta.uri;if(uri){return{uri:resolveUri(uri),hash:hash};}var assetUrlOverride=getManifest().assetUrlOverride;if(assetUrlOverride){var _uri=path.join(assetUrlOverride,hash);return{uri:resolveUri(_uri),hash:hash};}var fileScale=scale===1?'':\"@\"+scale+\"x\";var fileExtension=meta.type?\".\"+encodeURIComponent(meta.type):'';var suffix=\"/\"+encodeURIComponent(meta.name)+fileScale+fileExtension+\"?platform=\"+encodeURIComponent(Platform.OS)+\"&hash=\"+encodeURIComponent(meta.hash);if(/^https?:\\/\\//.test(meta.httpServerLocation)){var _uri2=meta.httpServerLocation+suffix;return{uri:_uri2,hash:hash};}var manifest2=getManifest2();if(manifest2!=null&&(_manifest2$extra=manifest2.extra)!=null&&(_manifest2$extra$expo=_manifest2$extra.expoGo)!=null&&_manifest2$extra$expo.developer){var baseUrl=new URL(\"http://\"+manifest2.extra.expoGo.debuggerHost);baseUrl.set('pathname',meta.httpServerLocation+suffix);return{uri:baseUrl.href,hash:hash};}if(getManifest().developer){var _baseUrl=new URL(getManifest().bundleUrl);_baseUrl.set('pathname',meta.httpServerLocation+suffix);return{uri:_baseUrl.href,hash:hash};}return{uri:\"https://classic-assets.eascdn.net/~assets/\"+encodeURIComponent(hash),hash:hash};}export function resolveUri(uri){if(!manifestBaseUrl){return uri;}var _URL=new URL(uri),protocol=_URL.protocol;if(protocol!==''){return uri;}var baseUrl=new URL(manifestBaseUrl);var resolvedPath=uri.startsWith('/')?uri:path.join(baseUrl.pathname,uri);baseUrl.set('pathname',resolvedPath);return baseUrl.href;}","map":{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":"w0BAAA,OAAS,QAAT,KAAyB,mBAAzB,CACA,MAAO,KAAP,KAAiB,iBAAjB,C,iEAEA,MAAO,IAAP,KAAgB,WAAhB,CAEA,MAAO,oBAAP,6BACA,OAAS,eAAT,CAA0B,WAA1B,CAAuC,YAAvC,uBAsBA,GAAM,iBAAgB,CAAG,WAAW,GAAG,gBAAvC,CAQA,MAAM,SAAU,kBAAV,CAA4B,IAA5B,CAA+C,4CAEnD,GAAI,gBAAgB,EAAI,gBAAgB,CAAC,cAAjB,CAAgC,IAAI,CAAC,IAArC,CAAxB,CAAoE,CAClE,IAAI,gCAAQ,IAAR,EAAiB,gBAAgB,CAAC,IAAI,CAAC,IAAN,CAAjC,CAAJ,CACD,CAID,GAAM,MAAK,CAAG,mBAAmB,CAAC,SAApB,CAA8B,IAAI,CAAC,MAAnC,CAA2C,UAAU,CAAC,GAAX,EAA3C,CAAd,CACA,GAAM,MAAK,CAAG,IAAI,CAAC,MAAL,CAAY,SAAZ,CAAsB,SAAC,CAAD,QAAO,EAAC,GAAK,KAAb,EAAtB,CAAd,CACA,GAAM,KAAI,CAAG,IAAI,CAAC,UAAL,CAAkB,IAAI,CAAC,UAAL,CAAgB,KAAhB,GAA0B,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAA5C,CAAiE,IAAI,CAAC,IAAnF,CAGA,GAAM,IAAG,CAAG,IAAI,CAAC,QAAL,CAAgB,IAAI,CAAC,QAAL,CAAc,KAAd,GAAwB,IAAI,CAAC,QAAL,CAAc,CAAd,CAAxC,CAA2D,IAAI,CAAC,GAA5E,CACA,GAAI,GAAJ,CAAS,CACP,MAAO,CAAE,GAAG,CAAE,UAAU,CAAC,GAAD,CAAjB,CAAwB,IAAI,CAAJ,IAAxB,CAAP,CACD,CAGD,GAAM,iBAAgB,CAAG,WAAW,GAAG,gBAAvC,CACA,GAAI,gBAAJ,CAAsB,CACpB,GAAM,KAAG,CAAG,IAAI,CAAC,IAAL,CAAU,gBAAV,CAA4B,IAA5B,CAAZ,CACA,MAAO,CAAE,GAAG,CAAE,UAAU,CAAC,IAAD,CAAjB,CAAwB,IAAI,CAAJ,IAAxB,CAAP,CACD,CAED,GAAM,UAAS,CAAG,KAAK,GAAK,CAAV,CAAc,EAAd,KAAuB,KAAvB,IAAlB,CACA,GAAM,cAAa,CAAG,IAAI,CAAC,IAAL,KAAgB,kBAAkB,CAAC,IAAI,CAAC,IAAN,CAAlC,CAAkD,EAAxE,CACA,GAAM,OAAM,KAAO,kBAAkB,CACnC,IAAI,CAAC,IAD8B,CAAzB,CAER,SAFQ,CAEI,aAFJ,cAE8B,kBAAkB,CAC1D,QAAQ,CAAC,EADiD,CAFhD,UAIF,kBAAkB,CAAC,IAAI,CAAC,IAAN,CAJ5B,CAQA,GAAI,eAAe,IAAf,CAAoB,IAAI,CAAC,kBAAzB,CAAJ,CAAkD,CAChD,GAAM,MAAG,CAAG,IAAI,CAAC,kBAAL,CAA0B,MAAtC,CACA,MAAO,CAAE,GAAG,CAAH,KAAF,CAAO,IAAI,CAAJ,IAAP,CAAP,CACD,CAGD,GAAM,UAAS,CAAG,YAAY,EAA9B,CAEA,GAAI,SAAJ,0BAAI,SAAS,CAAE,KAAf,gCAAI,iBAAkB,MAAtB,SAAI,sBAA0B,SAA9B,CAAyC,CACvC,GAAM,QAAO,CAAG,GAAI,IAAJ,WAAkB,SAAS,CAAC,KAAV,CAAgB,MAAhB,CAAuB,YAAzC,CAAhB,CACA,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAwB,IAAI,CAAC,kBAAL,CAA0B,MAAlD,EAEA,MAAO,CACL,GAAG,CAAE,OAAO,CAAC,IADR,CAEL,IAAI,CAAJ,IAFK,CAAP,CAID,CAGD,GAAI,WAAW,GAAG,SAAlB,CAA6B,CAC3B,GAAM,SAAO,CAAG,GAAI,IAAJ,CAAQ,WAAW,GAAG,SAAtB,CAAhB,CACA,QAAO,CAAC,GAAR,CAAY,UAAZ,CAAwB,IAAI,CAAC,kBAAL,CAA0B,MAAlD,EACA,MAAO,CAAE,GAAG,CAAE,QAAO,CAAC,IAAf,CAAqB,IAAI,CAAJ,IAArB,CAAP,CACD,CAGD,MAAO,CACL,GAAG,8CAA+C,kBAAkB,CAAC,IAAD,CAD/D,CAEL,IAAI,CAAJ,IAFK,CAAP,CAID,CAOD,MAAM,SAAU,WAAV,CAAqB,GAArB,CAAgC,CACpC,GAAI,CAAC,eAAL,CAAsB,CACpB,MAAO,IAAP,CACD,CAED,SAAqB,GAAI,IAAJ,CAAQ,GAAR,CAArB,CAAQ,QAAR,MAAQ,QAAR,CACA,GAAI,QAAQ,GAAK,EAAjB,CAAqB,CACnB,MAAO,IAAP,CACD,CAED,GAAM,QAAO,CAAG,GAAI,IAAJ,CAAQ,eAAR,CAAhB,CACA,GAAM,aAAY,CAAG,GAAG,CAAC,UAAJ,CAAe,GAAf,EAAsB,GAAtB,CAA4B,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,QAAlB,CAA4B,GAA5B,CAAjD,CACA,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAwB,YAAxB,EACA,MAAO,QAAO,CAAC,IAAf,CACD","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { manifestBaseUrl, getManifest, getManifest2 } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}