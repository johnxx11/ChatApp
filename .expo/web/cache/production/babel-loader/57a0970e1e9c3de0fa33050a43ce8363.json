{"ast":null,"code":"import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import LinkingContext from\"./LinkingContext\";import useLinkTo from\"./useLinkTo\";var getStateFromParams=function getStateFromParams(params){if(params!==null&&params!==void 0&&params.state){return params.state;}if(params!==null&&params!==void 0&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export default function useLinkProps(_ref){var _ref2;var to=_ref.to,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var _React$useContext=React.useContext(LinkingContext),options=_React$useContext.options;var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};var getPathFromStateHelper=(_ref2=options===null||options===void 0?void 0:options.getPathFromState)!=null?_ref2:getPathFromState;var href=typeof to==='string'?to:getPathFromStateHelper({routes:[{name:to.screen,params:to.params,state:getStateFromParams(to.params)}]},options===null||options===void 0?void 0:options.config);return{href:href,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps(_ref) {\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n  const onPress = e => {\n    var _e$currentTarget;\n    let shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented &&\n    // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n    // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) &&\n    // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  const getPathFromStateHelper = (options === null || options === void 0 ? void 0 : options.getPathFromState) ?? getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"module"}