{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_","value"],"mappings":"iEAAA,GAAMA,aAAY,CAAIC,QAAhBD,aAAgBC,CAAAA,KAAe,QACnCA,MAAK,CAACC,GAAND,CAAWE,SAAAA,GAAG,aAAUA,GAAV,EAAdF,EAA+BG,IAA/BH,CAAoC,IAApCA,CADmC,EAArC,CAGA,cAAe,SAASI,mBAAT,CAA4BC,MAA5B,CAAsD,CAAA,GAAbC,KAAI,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAG,IAAM,CACnE,GAAMC,UAAS,CAAG,CAAC,kBAAD,CAAqB,SAArB,CAAlB,CAEA,GAAI,CAACD,IAAL,CAAW,CACTC,SAAS,CAACC,IAAVD,CAAe,MAAfA,CAAuB,OAAvBA,CAAgC,WAAhCA,CAA6C,OAA7CA,EACF,CAEA,GAAME,YAAW,CAAGC,MAAM,CAACC,IAAPD,CAAYL,MAAZK,EAAoBE,MAApBF,CACjBR,SAAAA,GAAG,QAAK,CAACK,SAAS,CAACM,QAAVN,CAAmBL,GAAnBK,CAAN,EADcG,CAApB,CAIA,GAAID,WAAW,CAACK,MAAhB,CAAwB,CACtB,KAAM,IAAIC,MAAJ,oDAC+ChB,YAAY,CAC7DU,WAD6D,CAD3D,sHAGkHV,YAAY,CAChIQ,SADgI,CAH9H,0HAAN,CAOF,CAEA,GAAIF,MAAM,CAACW,OAAX,CAAoB,CAClBN,MAAM,CAACO,OAAPP,CAAeL,MAAM,CAACW,OAAtBN,EAA+BQ,OAA/BR,CAAuC,SAAA,IAAA,CAAgB,CAAf,yBAAU,IAAV,IAACS,CAAD,UAAIC,KAAJ,UACtC,GAAI,MAAOA,MAAP,GAAiB,QAArB,CAA+B,CAC7BhB,kBAAkB,CAACgB,KAAD,CAAQ,KAAR,CAAlBhB,CACF,CACD,CAJDM,EAKF,CACF","sourceRoot":"../../src","sourcesContent":["const formatToList = items => items.map(key => `- ${key}`).join('\\n');\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n//# sourceMappingURL=validatePathConfig.js.map"]},"metadata":{},"sourceType":"module"}