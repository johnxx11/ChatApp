{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var VELOCITY_FACTOR=0.2;var MAX_POINTERS=20;var PointerTracker=function(){function PointerTracker(){_classCallCheck(this,PointerTracker);_defineProperty(this,\"trackedPointers\",new Map());_defineProperty(this,\"touchEventsIds\",new Map());_defineProperty(this,\"lastMovedPointerId\",void 0);_defineProperty(this,\"cachedAverages\",{x:0,y:0});this.lastMovedPointerId=NaN;for(var i=0;i<MAX_POINTERS;++i){this.touchEventsIds.set(i,NaN);}}_createClass(PointerTracker,[{key:\"addToTracker\",value:function addToTracker(event){if(this.trackedPointers.has(event.pointerId)){return;}this.lastMovedPointerId=event.pointerId;var newElement={lastX:event.x,lastY:event.y,timeStamp:event.time,velocityX:0,velocityY:0};this.trackedPointers.set(event.pointerId,newElement);this.mapTouchEventId(event.pointerId);this.cachedAverages={x:this.getLastAvgX(),y:this.getLastAvgY()};}},{key:\"removeFromTracker\",value:function removeFromTracker(pointerId){this.trackedPointers.delete(pointerId);this.removeMappedTouchId(pointerId);}},{key:\"track\",value:function track(event){var element=this.trackedPointers.get(event.pointerId);if(!element){return;}this.lastMovedPointerId=event.pointerId;var dx=event.x-element.lastX;var dy=event.y-element.lastY;var dt=event.time-element.timeStamp;element.velocityX=dx/dt*1000*VELOCITY_FACTOR;element.velocityY=dy/dt*1000*VELOCITY_FACTOR;element.lastX=event.x;element.lastY=event.y;this.trackedPointers.set(event.pointerId,element);var avgX=this.getLastAvgX();var avgY=this.getLastAvgY();this.cachedAverages={x:avgX,y:avgY};}},{key:\"mapTouchEventId\",value:function mapTouchEventId(id){for(var _ref3 of this.touchEventsIds){var _ref2=_slicedToArray(_ref3,2);var mappedId=_ref2[0];var touchId=_ref2[1];if(isNaN(touchId)){this.touchEventsIds.set(mappedId,id);break;}}}},{key:\"removeMappedTouchId\",value:function removeMappedTouchId(id){var mappedId=this.getMappedTouchEventId(id);if(!isNaN(mappedId)){this.touchEventsIds.set(mappedId,NaN);}}},{key:\"getMappedTouchEventId\",value:function getMappedTouchEventId(touchEventId){for(var _ref6 of this.touchEventsIds.entries()){var _ref5=_slicedToArray(_ref6,2);var key=_ref5[0];var value=_ref5[1];if(value===touchEventId){return key;}}return NaN;}},{key:\"getVelocityX\",value:function getVelocityX(pointerId){var _this$trackedPointers;return(_this$trackedPointers=this.trackedPointers.get(pointerId))===null||_this$trackedPointers===void 0?void 0:_this$trackedPointers.velocityX;}},{key:\"getVelocityY\",value:function getVelocityY(pointerId){var _this$trackedPointers2;return(_this$trackedPointers2=this.trackedPointers.get(pointerId))===null||_this$trackedPointers2===void 0?void 0:_this$trackedPointers2.velocityY;}},{key:\"getLastX\",value:function getLastX(pointerId){if(pointerId!==undefined){var _this$trackedPointers3;return(_this$trackedPointers3=this.trackedPointers.get(pointerId))===null||_this$trackedPointers3===void 0?void 0:_this$trackedPointers3.lastX;}else{var _this$trackedPointers4;return(_this$trackedPointers4=this.trackedPointers.get(this.lastMovedPointerId))===null||_this$trackedPointers4===void 0?void 0:_this$trackedPointers4.lastX;}}},{key:\"getLastY\",value:function getLastY(pointerId){if(pointerId!==undefined){var _this$trackedPointers5;return(_this$trackedPointers5=this.trackedPointers.get(pointerId))===null||_this$trackedPointers5===void 0?void 0:_this$trackedPointers5.lastY;}else{var _this$trackedPointers6;return(_this$trackedPointers6=this.trackedPointers.get(this.lastMovedPointerId))===null||_this$trackedPointers6===void 0?void 0:_this$trackedPointers6.lastY;}}},{key:\"getLastAvgX\",value:function getLastAvgX(){var avgX=this.getSumX()/this.trackedPointers.size;return isNaN(avgX)?this.cachedAverages.x:avgX;}},{key:\"getLastAvgY\",value:function getLastAvgY(){var avgY=this.getSumY()/this.trackedPointers.size;return isNaN(avgY)?this.cachedAverages.y:avgY;}},{key:\"getSumX\",value:function getSumX(ignoredPointer){var sumX=0;this.trackedPointers.forEach(function(value,key){if(key!==ignoredPointer){sumX+=value.lastX;}});return sumX;}},{key:\"getSumY\",value:function getSumY(ignoredPointer){var sumY=0;this.trackedPointers.forEach(function(value,key){if(key!==ignoredPointer){sumY+=value.lastY;}});return sumY;}},{key:\"getTrackedPointersCount\",value:function getTrackedPointersCount(){return this.trackedPointers.size;}},{key:\"getTrackedPointersID\",value:function getTrackedPointersID(){var keys=[];this.trackedPointers.forEach(function(_value,key){keys.push(key);});return keys;}},{key:\"getData\",value:function getData(){return this.trackedPointers;}},{key:\"resetTracker\",value:function resetTracker(){this.trackedPointers.clear();this.lastMovedPointerId=NaN;for(var i=0;i<MAX_POINTERS;++i){this.touchEventsIds.set(i,NaN);}}}],[{key:\"shareCommonPointers\",value:function shareCommonPointers(stPointers,ndPointers){return stPointers.some(function(pointerId){return ndPointers.includes(pointerId);});}}]);return PointerTracker;}();export{PointerTracker as default};","map":{"version":3,"sources":["PointerTracker.ts"],"names":["VELOCITY_FACTOR","MAX_POINTERS","x","y","constructor","i","addToTracker","event","newElement","lastX","lastY","timeStamp","velocityX","velocityY","removeFromTracker","track","element","dx","dy","dt","avgX","avgY","mapTouchEventId","isNaN","removeMappedTouchId","mappedId","getMappedTouchEventId","value","getVelocityX","getVelocityY","getLastX","pointerId","getLastY","getLastAvgX","getLastAvgY","getSumX","sumX","key","getSumY","sumY","getTrackedPointersCount","getTrackedPointersID","keys","getData","resetTracker","shareCommonPointers","stPointers","ndPointers"],"mappings":"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","sourcesContent":["import { AdaptedEvent } from '../interfaces';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}