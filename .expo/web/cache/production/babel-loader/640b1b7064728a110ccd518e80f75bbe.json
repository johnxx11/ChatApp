{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{Platform}from'expo-modules-core';import{getAssetByID}from\"./AssetRegistry\";import{selectAssetSource}from\"./AssetSources\";import*as AssetUris from\"./AssetUris\";import*as ImageAssets from\"./ImageAssets\";import{getLocalAssetUri}from\"./LocalAssets\";import{downloadAsync as _downloadAsync,IS_ENV_WITH_UPDATES_ENABLED}from\"./PlatformUtils\";import resolveAssetSource from\"./resolveAssetSource\";export var Asset=function(){function Asset(_ref){var name=_ref.name,type=_ref.type,_ref$hash=_ref.hash,hash=_ref$hash===void 0?null:_ref$hash,uri=_ref.uri,width=_ref.width,height=_ref.height;_classCallCheck(this,Asset);this.hash=null;this.localUri=null;this.width=null;this.height=null;this.downloading=false;this.downloaded=false;this._downloadCallbacks=[];this.name=name;this.type=type;this.hash=hash;this.uri=uri;if(typeof width==='number'){this.width=width;}if(typeof height==='number'){this.height=height;}if(hash){this.localUri=getLocalAssetUri(hash,type);if(this.localUri){this.downloaded=true;}}if(Platform.OS==='web'){if(!name){this.name=AssetUris.getFilename(uri);}if(!type){this.type=AssetUris.getFileExtension(uri);}}}_createClass(Asset,[{key:\"downloadAsync\",value:function(){var _downloadAsync2=_asyncToGenerator(function*(){var _this=this;if(this.downloaded){return this;}if(this.downloading){yield new Promise(function(resolve,reject){_this._downloadCallbacks.push({resolve:resolve,reject:reject});});return this;}this.downloading=true;try{if(Platform.OS==='web'){if(ImageAssets.isImageType(this.type)){var _yield$ImageAssets$ge=yield ImageAssets.getImageInfoAsync(this.uri),width=_yield$ImageAssets$ge.width,height=_yield$ImageAssets$ge.height,name=_yield$ImageAssets$ge.name;this.width=width;this.height=height;this.name=name;}else{this.name=AssetUris.getFilename(this.uri);}}this.localUri=yield _downloadAsync(this.uri,this.hash,this.type,this.name);this.downloaded=true;this._downloadCallbacks.forEach(function(_ref2){var resolve=_ref2.resolve;return resolve();});}catch(e){this._downloadCallbacks.forEach(function(_ref3){var reject=_ref3.reject;return reject(e);});throw e;}finally{this.downloading=false;this._downloadCallbacks=[];}return this;});function downloadAsync(){return _downloadAsync2.apply(this,arguments);}return downloadAsync;}()}],[{key:\"loadAsync\",value:function loadAsync(moduleId){var moduleIds=Array.isArray(moduleId)?moduleId:[moduleId];return Promise.all(moduleIds.map(function(moduleId){return Asset.fromModule(moduleId).downloadAsync();}));}},{key:\"fromModule\",value:function fromModule(virtualAssetModule){if(typeof virtualAssetModule==='string'){return Asset.fromURI(virtualAssetModule);}var meta=getAssetByID(virtualAssetModule);if(!meta){throw new Error(\"Module \\\"\"+virtualAssetModule+\"\\\" is missing from the asset registry\");}if(!IS_ENV_WITH_UPDATES_ENABLED){var _resolveAssetSource=resolveAssetSource(virtualAssetModule),uri=_resolveAssetSource.uri;var asset=new Asset({name:meta.name,type:meta.type,hash:meta.hash,uri:uri,width:meta.width,height:meta.height});if(Platform.OS==='android'&&!uri.includes(':')&&(meta.width||meta.height)){asset.localUri=asset.uri;asset.downloaded=true;}Asset.byHash[meta.hash]=asset;return asset;}return Asset.fromMetadata(meta);}},{key:\"fromMetadata\",value:function fromMetadata(meta){var metaHash=meta.hash;if(Asset.byHash[metaHash]){return Asset.byHash[metaHash];}var _selectAssetSource=selectAssetSource(meta),uri=_selectAssetSource.uri,hash=_selectAssetSource.hash;var asset=new Asset({name:meta.name,type:meta.type,hash:hash,uri:uri,width:meta.width,height:meta.height});Asset.byHash[metaHash]=asset;return asset;}},{key:\"fromURI\",value:function fromURI(uri){if(Asset.byUri[uri]){return Asset.byUri[uri];}var type='';if(uri.indexOf(';base64')>-1){type=uri.split(';')[0].split('/')[1];}else{var extension=AssetUris.getFileExtension(uri);type=extension.startsWith('.')?extension.substring(1):extension;}var asset=new Asset({name:'',type:type,hash:null,uri:uri});Asset.byUri[uri]=asset;return asset;}}]);return Asset;}();Asset.byHash={};Asset.byUri={};","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}