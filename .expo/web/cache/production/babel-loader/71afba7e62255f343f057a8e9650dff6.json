{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _excluded=[\"enabled\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{State}from\"../../State\";import{PointerType,TouchEventType,EventTypes}from\"../interfaces\";import GestureHandlerOrchestrator from\"../tools/GestureHandlerOrchestrator\";import InteractionManager from\"../tools/InteractionManager\";import PointerEventManager from\"../tools/PointerEventManager\";import PointerTracker from\"../tools/PointerTracker\";import TouchEventManager from\"../tools/TouchEventManager\";import{isPointerInBounds}from\"../utils\";var GestureHandler=function(){function GestureHandler(){var _this=this;_classCallCheck(this,GestureHandler);_defineProperty(this,\"lastSentState\",null);_defineProperty(this,\"currentState\",State.UNDETERMINED);_defineProperty(this,\"shouldCancellWhenOutside\",false);_defineProperty(this,\"hasCustomActivationCriteria\",void 0);_defineProperty(this,\"enabled\",false);_defineProperty(this,\"ref\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"config\",{enabled:false});_defineProperty(this,\"view\",void 0);_defineProperty(this,\"eventManagers\",[]);_defineProperty(this,\"tracker\",new PointerTracker());_defineProperty(this,\"activationIndex\",0);_defineProperty(this,\"awaiting\",false);_defineProperty(this,\"active\",false);_defineProperty(this,\"shouldResetProgress\",false);_defineProperty(this,\"pointerType\",PointerType.NONE);_defineProperty(this,\"sendEvent\",function(newState,oldState){var _this$propsRef$curren=_this.propsRef.current,onGestureHandlerEvent=_this$propsRef$curren.onGestureHandlerEvent,onGestureHandlerStateChange=_this$propsRef$curren.onGestureHandlerStateChange;var resultEvent=_this.transformEventData(newState,oldState);if(_this.lastSentState!==newState){_this.lastSentState=newState;invokeNullableMethod(onGestureHandlerStateChange,resultEvent);}if(_this.currentState===State.ACTIVE){resultEvent.nativeEvent.oldState=undefined;invokeNullableMethod(onGestureHandlerEvent,resultEvent);}});this.hasCustomActivationCriteria=false;}_createClass(GestureHandler,[{key:\"init\",value:function init(ref,propsRef){this.propsRef=propsRef;this.ref=ref;this.currentState=State.UNDETERMINED;this.setView();this.addEventManager(new PointerEventManager(this.view));this.addEventManager(new TouchEventManager(this.view));}},{key:\"setView\",value:function setView(){if(!this.ref){throw new Error(\"Cannot find HTML Element for handler \"+this.handlerTag);}this.view=findNodeHandle(this.ref);this.view.style['touchAction']='none';this.view.style['WebkitTouchCallout']='none';if(!this.config.userSelect){this.view.style['webkitUserSelect']='none';this.view.style['userSelect']='none';}else{this.view.style['webkitUserSelect']=this.config.userSelect;this.view.style['userSelect']=this.config.userSelect;}}},{key:\"addEventManager\",value:function addEventManager(manager){manager.setOnPointerDown(this.onPointerDown.bind(this));manager.setOnPointerAdd(this.onPointerAdd.bind(this));manager.setOnPointerUp(this.onPointerUp.bind(this));manager.setOnPointerRemove(this.onPointerRemove.bind(this));manager.setOnPointerMove(this.onPointerMove.bind(this));manager.setOnPointerEnter(this.onPointerEnter.bind(this));manager.setOnPointerOut(this.onPointerOut.bind(this));manager.setOnPointerCancel(this.onPointerCancel.bind(this));manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));manager.setListeners();this.eventManagers.push(manager);}},{key:\"onCancel\",value:function onCancel(){}},{key:\"onReset\",value:function onReset(){}},{key:\"resetProgress\",value:function resetProgress(){}},{key:\"reset\",value:function reset(){this.tracker.resetTracker();this.onReset();this.resetProgress();this.eventManagers.forEach(function(manager){return manager.resetManager();});this.currentState=State.UNDETERMINED;}},{key:\"moveToState\",value:function moveToState(newState,sendIfDisabled){if(this.currentState===newState){return;}var oldState=this.currentState;this.currentState=newState;if(this.tracker.getTrackedPointersCount()>0&&this.config.needsPointerData&&this.isFinished()){this.cancelTouches();}GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this,newState,oldState,sendIfDisabled);this.onStateChange(newState,oldState);}},{key:\"onStateChange\",value:function onStateChange(_newState,_oldState){}},{key:\"begin\",value:function begin(){if(!this.checkHitSlop()){return;}if(this.currentState===State.UNDETERMINED){this.moveToState(State.BEGAN);}}},{key:\"fail\",value:function fail(sendIfDisabled){if(this.currentState===State.ACTIVE||this.currentState===State.BEGAN){this.moveToState(State.FAILED,sendIfDisabled);this.view.style.cursor='auto';}this.resetProgress();}},{key:\"cancel\",value:function cancel(sendIfDisabled){if(this.currentState===State.ACTIVE||this.currentState===State.UNDETERMINED||this.currentState===State.BEGAN){this.onCancel();this.moveToState(State.CANCELLED,sendIfDisabled);this.view.style.cursor='auto';}}},{key:\"activate\",value:function activate(){var _force=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.currentState===State.UNDETERMINED||this.currentState===State.BEGAN){this.moveToState(State.ACTIVE);this.view.style.cursor='grab';}}},{key:\"end\",value:function end(){if(this.currentState===State.BEGAN||this.currentState===State.ACTIVE){this.moveToState(State.END);this.view.style.cursor='auto';}this.resetProgress();}},{key:\"isAwaiting\",value:function isAwaiting(){return this.awaiting;}},{key:\"setAwaiting\",value:function setAwaiting(value){this.awaiting=value;}},{key:\"isActive\",value:function isActive(){return this.active;}},{key:\"setActive\",value:function setActive(value){this.active=value;}},{key:\"getShouldResetProgress\",value:function getShouldResetProgress(){return this.shouldResetProgress;}},{key:\"setShouldResetProgress\",value:function setShouldResetProgress(value){this.shouldResetProgress=value;}},{key:\"getActivationIndex\",value:function getActivationIndex(){return this.activationIndex;}},{key:\"setActivationIndex\",value:function setActivationIndex(value){this.activationIndex=value;}},{key:\"shouldWaitForHandlerFailure\",value:function shouldWaitForHandlerFailure(handler){if(handler===this){return false;}return InteractionManager.getInstance().shouldWaitForHandlerFailure(this,handler);}},{key:\"shouldRequireToWaitForFailure\",value:function shouldRequireToWaitForFailure(handler){if(handler===this){return false;}return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this,handler);}},{key:\"shouldRecognizeSimultaneously\",value:function shouldRecognizeSimultaneously(handler){if(handler===this){return true;}return InteractionManager.getInstance().shouldRecognizeSimultaneously(this,handler);}},{key:\"shouldBeCancelledByOther\",value:function shouldBeCancelledByOther(handler){if(handler===this){return false;}return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this,handler);}},{key:\"onPointerDown\",value:function onPointerDown(event){GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);this.pointerType=event.pointerType;if(this.pointerType===PointerType.TOUCH){GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);}if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerAdd\",value:function onPointerAdd(event){if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerUp\",value:function onPointerUp(event){if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerRemove\",value:function onPointerRemove(event){if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerMove\",value:function onPointerMove(event){this.tryToSendMoveEvent(false);if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerOut\",value:function onPointerOut(event){if(this.shouldCancellWhenOutside){switch(this.currentState){case State.ACTIVE:this.cancel();break;case State.BEGAN:this.fail();break;}return;}if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerEnter\",value:function onPointerEnter(event){if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerCancel\",value:function onPointerCancel(event){if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"onPointerOutOfBounds\",value:function onPointerOutOfBounds(event){this.tryToSendMoveEvent(true);if(this.config.needsPointerData){this.sendTouchEvent(event);}}},{key:\"tryToSendMoveEvent\",value:function tryToSendMoveEvent(out){if(this.enabled&&this.active&&(!out||out&&!this.shouldCancellWhenOutside)){this.sendEvent(this.currentState,this.currentState);}}},{key:\"sendTouchEvent\",value:function sendTouchEvent(event){if(!this.enabled){return;}var onGestureHandlerEvent=this.propsRef.current.onGestureHandlerEvent;var touchEvent=this.transformTouchEvent(event);if(touchEvent){invokeNullableMethod(onGestureHandlerEvent,touchEvent);}}},{key:\"transformEventData\",value:function transformEventData(newState,oldState){return{nativeEvent:_objectSpread(_objectSpread({numberOfPointers:this.tracker.getTrackedPointersCount(),state:newState,pointerInside:isPointerInBounds(this.view,{x:this.tracker.getLastAvgX(),y:this.tracker.getLastAvgY()})},this.transformNativeEvent()),{},{handlerTag:this.handlerTag,target:this.ref,oldState:newState!==oldState?oldState:undefined}),timeStamp:Date.now()};}},{key:\"transformTouchEvent\",value:function transformTouchEvent(event){var _this2=this;var _event$touchEventType;var rect=this.view.getBoundingClientRect();var all=[];var changed=[];var trackerData=this.tracker.getData();if(trackerData.size===0||!trackerData.has(event.pointerId)){return;}trackerData.forEach(function(element,key){var id=_this2.tracker.getMappedTouchEventId(key);all.push({id:id,x:element.lastX-rect.left,y:element.lastY-rect.top,absoluteX:element.lastX,absoluteY:element.lastY});});if(event.eventType!==EventTypes.CANCEL){changed.push({id:this.tracker.getMappedTouchEventId(event.pointerId),x:event.x-rect.left,y:event.y-rect.top,absoluteX:event.x,absoluteY:event.y});}else{trackerData.forEach(function(element,key){var id=_this2.tracker.getMappedTouchEventId(key);changed.push({id:id,x:element.lastX-rect.left,y:element.lastY-rect.top,absoluteX:element.lastX,absoluteY:element.lastY});});}var eventType=TouchEventType.UNDETERMINED;switch(event.eventType){case EventTypes.DOWN:case EventTypes.ADDITIONAL_POINTER_DOWN:eventType=TouchEventType.DOWN;break;case EventTypes.UP:case EventTypes.ADDITIONAL_POINTER_UP:eventType=TouchEventType.UP;break;case EventTypes.MOVE:eventType=TouchEventType.MOVE;break;case EventTypes.CANCEL:eventType=TouchEventType.CANCELLED;break;}var numberOfTouches=all.length;if(event.eventType===EventTypes.UP||event.eventType===EventTypes.ADDITIONAL_POINTER_UP){--numberOfTouches;}return{nativeEvent:{handlerTag:this.handlerTag,state:this.currentState,eventType:(_event$touchEventType=event.touchEventType)!==null&&_event$touchEventType!==void 0?_event$touchEventType:eventType,changedTouches:changed,allTouches:all,numberOfTouches:numberOfTouches},timeStamp:Date.now()};}},{key:\"cancelTouches\",value:function cancelTouches(){var _this3=this;var rect=this.view.getBoundingClientRect();var all=[];var changed=[];var trackerData=this.tracker.getData();if(trackerData.size===0){return;}trackerData.forEach(function(element,key){var id=_this3.tracker.getMappedTouchEventId(key);all.push({id:id,x:element.lastX-rect.left,y:element.lastY-rect.top,absoluteX:element.lastX,absoluteY:element.lastY});changed.push({id:id,x:element.lastX-rect.left,y:element.lastY-rect.top,absoluteX:element.lastX,absoluteY:element.lastY});});var cancelEvent={nativeEvent:{handlerTag:this.handlerTag,state:this.currentState,eventType:TouchEventType.CANCELLED,changedTouches:changed,allTouches:all,numberOfTouches:all.length},timeStamp:Date.now()};var onGestureHandlerEvent=this.propsRef.current.onGestureHandlerEvent;invokeNullableMethod(onGestureHandlerEvent,cancelEvent);}},{key:\"transformNativeEvent\",value:function transformNativeEvent(){return{};}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref){var _ref$enabled=_ref.enabled,enabled=_ref$enabled===void 0?true:_ref$enabled,props=_objectWithoutProperties(_ref,_excluded);this.config=_objectSpread({enabled:enabled},props);this.enabled=enabled;if(this.config.shouldCancelWhenOutside!==undefined){this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);}this.validateHitSlops();if(this.enabled){return;}switch(this.currentState){case State.ACTIVE:this.fail(true);break;case State.UNDETERMINED:GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);break;default:this.cancel(true);break;}}},{key:\"checkCustomActivationCriteria\",value:function checkCustomActivationCriteria(criterias){for(var key in this.config){if(criterias.indexOf(key)>=0){this.hasCustomActivationCriteria=true;}}}},{key:\"validateHitSlops\",value:function validateHitSlops(){if(!this.config.hitSlop){return;}if(this.config.hitSlop.left!==undefined&&this.config.hitSlop.right!==undefined&&this.config.hitSlop.width!==undefined){throw new Error('HitSlop Error: Cannot define left, right and width at the same time');}if(this.config.hitSlop.width!==undefined&&this.config.hitSlop.left===undefined&&this.config.hitSlop.right===undefined){throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');}if(this.config.hitSlop.height!==undefined&&this.config.hitSlop.top!==undefined&&this.config.hitSlop.bottom!==undefined){throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');}if(this.config.hitSlop.height!==undefined&&this.config.hitSlop.top===undefined&&this.config.hitSlop.bottom===undefined){throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');}}},{key:\"checkHitSlop\",value:function checkHitSlop(){if(!this.config.hitSlop){return true;}var width=this.view.getBoundingClientRect().width;var height=this.view.getBoundingClientRect().height;var left=0;var top=0;var right=width;var bottom=height;if(this.config.hitSlop.horizontal!==undefined){left-=this.config.hitSlop.horizontal;right+=this.config.hitSlop.horizontal;}if(this.config.hitSlop.vertical!==undefined){top-=this.config.hitSlop.vertical;bottom+=this.config.hitSlop.vertical;}if(this.config.hitSlop.left!==undefined){left=-this.config.hitSlop.left;}if(this.config.hitSlop.right!==undefined){right=width+this.config.hitSlop.right;}if(this.config.hitSlop.top!==undefined){top=-this.config.hitSlop.top;}if(this.config.hitSlop.bottom!==undefined){bottom=width+this.config.hitSlop.bottom;}if(this.config.hitSlop.width!==undefined){if(this.config.hitSlop.left!==undefined){right=left+this.config.hitSlop.width;}else if(this.config.hitSlop.right!==undefined){left=right-this.config.hitSlop.width;}}if(this.config.hitSlop.height!==undefined){if(this.config.hitSlop.top!==undefined){bottom=top+this.config.hitSlop.height;}else if(this.config.hitSlop.bottom!==undefined){top=bottom-this.config.hitSlop.height;}}var rect=this.view.getBoundingClientRect();var offsetX=this.tracker.getLastX()-rect.left;var offsetY=this.tracker.getLastY()-rect.top;if(offsetX>=left&&offsetX<=right&&offsetY>=top&&offsetY<=bottom){return true;}return false;}},{key:\"isPointerInBounds\",value:function isPointerInBounds(_ref2){var x=_ref2.x,y=_ref2.y;var rect=this.view.getBoundingClientRect();return x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom;}},{key:\"resetConfig\",value:function resetConfig(){}},{key:\"getTag\",value:function getTag(){return this.handlerTag;}},{key:\"setTag\",value:function setTag(tag){this.handlerTag=tag;}},{key:\"getConfig\",value:function getConfig(){return this.config;}},{key:\"getShouldEnableGestureOnSetup\",value:function getShouldEnableGestureOnSetup(){throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');}},{key:\"getView\",value:function getView(){return this.view;}},{key:\"getEventManagers\",value:function getEventManagers(){return this.eventManagers;}},{key:\"getTracker\",value:function getTracker(){return this.tracker;}},{key:\"getTrackedPointersID\",value:function getTrackedPointersID(){return this.tracker.getTrackedPointersID();}},{key:\"getState\",value:function getState(){return this.currentState;}},{key:\"isEnabled\",value:function isEnabled(){return this.enabled;}},{key:\"isFinished\",value:function isFinished(){return this.currentState===State.END||this.currentState===State.FAILED||this.currentState===State.CANCELLED;}},{key:\"setShouldCancelWhenOutside\",value:function setShouldCancelWhenOutside(shouldCancel){this.shouldCancellWhenOutside=shouldCancel;}},{key:\"getShouldCancelWhenOutside\",value:function getShouldCancelWhenOutside(){return this.shouldCancellWhenOutside;}},{key:\"getPointerType\",value:function getPointerType(){return this.pointerType;}}]);return GestureHandler;}();export{GestureHandler as default};function invokeNullableMethod(method,event){if(!method){return;}if(typeof method==='function'){method(event);return;}if('__getHandler'in method&&typeof method.__getHandler==='function'){var handler=method.__getHandler();invokeNullableMethod(handler,event);return;}if(!('__nodeConfig'in method)){return;}var argMapping=method.__nodeConfig.argMapping;if(!Array.isArray(argMapping)){return;}for(var _ref5 of argMapping.entries()){var _ref4=_slicedToArray(_ref5,2);var index=_ref4[0];var _ref4$=_slicedToArray(_ref4[1],2);var key=_ref4$[0];var value=_ref4$[1];if(!(key in event.nativeEvent)){continue;}var nativeValue=event.nativeEvent[key];if(value!==null&&value!==void 0&&value.setValue){value.setValue(nativeValue);}else{method.__nodeConfig.argMapping[index]=[key,nativeValue];}}return;}","map":{"version":3,"sources":["GestureHandler.ts"],"names":["State","UNDETERMINED","enabled","PointerType","NONE","constructor","init","setView","findNodeHandle","addEventManager","manager","onCancel","onReset","resetProgress","reset","moveToState","oldState","GestureHandlerOrchestrator","onStateChange","begin","fail","cancel","activate","_force","end","isAwaiting","setAwaiting","isActive","setActive","getShouldResetProgress","setShouldResetProgress","getActivationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","InteractionManager","shouldRequireToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","onPointerDown","event","onPointerAdd","onPointerUp","onPointerRemove","onPointerMove","onPointerOut","onPointerEnter","onPointerCancel","onPointerOutOfBounds","tryToSendMoveEvent","out","sendTouchEvent","onGestureHandlerEvent","touchEvent","invokeNullableMethod","onGestureHandlerStateChange","resultEvent","transformEventData","nativeEvent","numberOfPointers","state","pointerInside","isPointerInBounds","x","y","handlerTag","target","newState","undefined","timeStamp","Date","transformTouchEvent","rect","all","changed","trackerData","id","element","absoluteX","absoluteY","lastY","EventTypes","eventType","TouchEventType","numberOfTouches","changedTouches","allTouches","cancelTouches","cancelEvent","length","transformNativeEvent","updateGestureConfig","props","checkCustomActivationCriteria","criterias","validateHitSlops","checkHitSlop","width","height","left","top","right","bottom","offsetX","offsetY","resetConfig","getTag","setTag","getConfig","getShouldEnableGestureOnSetup","getView","getEventManagers","getTracker","getTrackedPointersID","getState","isEnabled","isFinished","setShouldCancelWhenOutside","getShouldCancelWhenOutside","getPointerType","method","argMapping","Array","key","nativeValue","value"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria: boolean;\n  protected enabled = false;\n\n  private ref!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n  protected view!: HTMLElement;\n\n  protected eventManagers: EventManager[] = [];\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  public constructor() {\n    this.hasCustomActivationCriteria = false;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(ref: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n\n  private setView() {\n    if (!this.ref) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${this.handlerTag}`\n      );\n    }\n\n    this.view = findNodeHandle(this.ref) as unknown as HTMLElement;\n    this.view.style['touchAction'] = 'none';\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n\n    if (!this.config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = this.config.userSelect;\n      this.view.style['userSelect'] = this.config.userSelect;\n    }\n  }\n\n  private addEventManager(manager: EventManager): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n\n    this.eventManagers.push(manager);\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach((manager: EventManager) =>\n      manager.resetManager()\n    );\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOut(event: AdaptedEvent): void {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent() {\n    return {};\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n    const offsetX: number = this.tracker.getLastX() - rect.left;\n    const offsetY: number = this.tracker.getLastY() - rect.top;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  protected getConfig() {\n    return this.config;\n  }\n\n  public getShouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  public getView(): HTMLElement {\n    return this.view;\n  }\n\n  public getEventManagers(): EventManager[] {\n    return this.eventManagers;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}