{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import{useState}from'react';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var _useState=useState(navigation.isFocused),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["React","useState","useNavigation","useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"mappings":"iEAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,OAAzB,CAEA,MAAOC,cAAP,uBAMA,cAAe,SAASC,aAAT,EAAiC,CAC9C,GAAMC,WAAU,CAAGF,aAAa,EAAhC,CACA,cAAkCD,QAAQ,CAACG,UAAU,CAACC,SAAZ,CAA1C,wCAAOA,SAAP,eAAkBC,YAAlB,eAEA,GAAMC,cAAa,CAAGH,UAAU,CAACC,SAAXD,EAAtB,CAEA,GAAIC,SAAS,GAAKE,aAAlB,CAAiC,CAM/BD,YAAY,CAACC,aAAD,CAAZD,CACF,CAEAN,KAAK,CAACQ,SAANR,CAAgB,UAAM,CACpB,GAAMS,iBAAgB,CAAGL,UAAU,CAACM,WAAXN,CAAuB,OAAvBA,CAAgC,iBACvDE,aAAY,CAAC,IAAD,CAD2C,EAAhCF,CAAzB,CAIA,GAAMO,gBAAe,CAAGP,UAAU,CAACM,WAAXN,CAAuB,MAAvBA,CAA+B,iBACrDE,aAAY,CAAC,KAAD,CADyC,EAA/BF,CAAxB,CAIA,MAAO,WAAM,CACXK,gBAAgB,GAChBE,eAAe,GAChB,CAHD,CAID,CAbDX,CAaG,CAACI,UAAD,CAbHJ,EAeAA,KAAK,CAACY,aAANZ,CAAoBO,aAApBP,EAEA,MAAOO,cAAP,CACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused() {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n  const valueToReturn = navigation.isFocused();\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () => setIsFocused(true));\n    const unsubscribeBlur = navigation.addListener('blur', () => setIsFocused(false));\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}\n//# sourceMappingURL=useIsFocused.js.map"]},"metadata":{},"sourceType":"module"}