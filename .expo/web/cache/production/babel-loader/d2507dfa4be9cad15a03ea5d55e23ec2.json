{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{Asset}from\"./Asset\";export function useAssets(moduleIds){var _useState=useState(),_useState2=_slicedToArray(_useState,2),assets=_useState2[0],setAssets=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){Asset.loadAsync(moduleIds).then(setAssets).catch(setError);},[]);return[assets,error];}","map":{"version":3,"sources":["../src/AssetHooks.ts"],"names":[],"mappings":"iEAAA,OAAS,SAAT,CAAoB,QAApB,KAAoC,OAApC,CAEA,OAAS,KAAT,eAuBA,MAAM,SAAU,UAAV,CAAoB,SAApB,CAAgD,CACpD,cAA4B,QAAQ,EAApC,wCAAO,MAAP,eAAe,SAAf,eACA,eAA0B,QAAQ,EAAlC,yCAAO,KAAP,eAAc,QAAd,eAEA,SAAS,CAAC,UAAK,CACb,KAAK,CAAC,SAAN,CAAgB,SAAhB,EAA2B,IAA3B,CAAgC,SAAhC,EAA2C,KAA3C,CAAiD,QAAjD,EACD,CAFQ,CAEN,EAFM,CAAT,CAIA,MAAO,CAAC,MAAD,CAAS,KAAT,CAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n// @needsAudit\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * > Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @return Returns an array containing:\n * - on the first position, a list of all loaded assets. If they aren't loaded yet, this value is\n *   `undefined`.\n * - on the second position, an error which encountered when loading the assets. If there was no\n *   error, this value is `undefined`.\n *\n * @example\n * ```tsx\n * const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);\n *\n * return assets ? <Image source={assets[0]} /> : null;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}