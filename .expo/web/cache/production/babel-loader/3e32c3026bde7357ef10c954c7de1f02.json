{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _createClass from\"@babel/runtime/helpers/createClass\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{getNextHandlerTag}from\"../handlersRegistry\";import{isRemoteDebuggingEnabled}from\"../../utils\";export var CALLBACK_TYPE={UNDEFINED:0,BEGAN:1,START:2,UPDATE:3,CHANGE:4,END:5,FINALIZE:6,TOUCHES_DOWN:7,TOUCHES_MOVE:8,TOUCHES_UP:9,TOUCHES_CANCELLED:10};export var Gesture=_createClass(function Gesture(){_classCallCheck(this,Gesture);});var nextGestureId=0;export var BaseGesture=function(_Gesture){_inherits(BaseGesture,_Gesture);var _super=_createSuper(BaseGesture);function BaseGesture(){var _this;_classCallCheck(this,BaseGesture);_this=_super.call(this);_defineProperty(_assertThisInitialized(_this),\"gestureId\",-1);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",-1);_defineProperty(_assertThisInitialized(_this),\"handlerName\",'');_defineProperty(_assertThisInitialized(_this),\"config\",{});_defineProperty(_assertThisInitialized(_this),\"handlers\",{gestureId:-1,handlerTag:-1,isWorklet:[]});_this.gestureId=nextGestureId++;_this.handlers.gestureId=_this.gestureId;return _this;}_createClass(BaseGesture,[{key:\"addDependency\",value:function addDependency(key,gesture){var value=this.config[key];this.config[key]=value?Array().concat(value,gesture):[gesture];}},{key:\"withRef\",value:function withRef(ref){this.config.ref=ref;return this;}},{key:\"isWorklet\",value:function isWorklet(callback){return callback.__workletHash!==undefined;}},{key:\"onBegin\",value:function onBegin(callback){this.handlers.onBegin=callback;this.handlers.isWorklet[CALLBACK_TYPE.BEGAN]=this.isWorklet(callback);return this;}},{key:\"onStart\",value:function onStart(callback){this.handlers.onStart=callback;this.handlers.isWorklet[CALLBACK_TYPE.START]=this.isWorklet(callback);return this;}},{key:\"onEnd\",value:function onEnd(callback){this.handlers.onEnd=callback;this.handlers.isWorklet[CALLBACK_TYPE.END]=this.isWorklet(callback);return this;}},{key:\"onFinalize\",value:function onFinalize(callback){this.handlers.onFinalize=callback;this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE]=this.isWorklet(callback);return this;}},{key:\"onTouchesDown\",value:function onTouchesDown(callback){this.config.needsPointerData=true;this.handlers.onTouchesDown=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN]=this.isWorklet(callback);return this;}},{key:\"onTouchesMove\",value:function onTouchesMove(callback){this.config.needsPointerData=true;this.handlers.onTouchesMove=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE]=this.isWorklet(callback);return this;}},{key:\"onTouchesUp\",value:function onTouchesUp(callback){this.config.needsPointerData=true;this.handlers.onTouchesUp=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP]=this.isWorklet(callback);return this;}},{key:\"onTouchesCancelled\",value:function onTouchesCancelled(callback){this.config.needsPointerData=true;this.handlers.onTouchesCancelled=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED]=this.isWorklet(callback);return this;}},{key:\"enabled\",value:function enabled(_enabled){this.config.enabled=_enabled;return this;}},{key:\"shouldCancelWhenOutside\",value:function shouldCancelWhenOutside(value){this.config.shouldCancelWhenOutside=value;return this;}},{key:\"hitSlop\",value:function hitSlop(_hitSlop){this.config.hitSlop=_hitSlop;return this;}},{key:\"runOnJS\",value:function runOnJS(_runOnJS){this.config.runOnJS=_runOnJS;return this;}},{key:\"simultaneousWithExternalGesture\",value:function simultaneousWithExternalGesture(){for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}for(var gesture of gestures){this.addDependency('simultaneousWith',gesture);}return this;}},{key:\"requireExternalGestureToFail\",value:function requireExternalGestureToFail(){for(var _len2=arguments.length,gestures=new Array(_len2),_key2=0;_key2<_len2;_key2++){gestures[_key2]=arguments[_key2];}for(var gesture of gestures){this.addDependency('requireToFail',gesture);}return this;}},{key:\"withTestId\",value:function withTestId(id){this.config.testId=id;return this;}},{key:\"cancelsTouchesInView\",value:function cancelsTouchesInView(value){this.config.cancelsTouchesInView=value;return this;}},{key:\"initialize\",value:function initialize(){this.handlerTag=getNextHandlerTag();this.handlers=_objectSpread(_objectSpread({},this.handlers),{},{handlerTag:this.handlerTag});if(this.config.ref){this.config.ref.current=this;}}},{key:\"toGestureArray\",value:function toGestureArray(){return[this];}},{key:\"prepare\",value:function prepare(){}},{key:\"shouldUseReanimated\",get:function get(){return this.config.runOnJS!==true&&!this.handlers.isWorklet.includes(false)&&!isRemoteDebuggingEnabled();}}]);return BaseGesture;}(Gesture);export var ContinousBaseGesture=function(_BaseGesture){_inherits(ContinousBaseGesture,_BaseGesture);var _super2=_createSuper(ContinousBaseGesture);function ContinousBaseGesture(){_classCallCheck(this,ContinousBaseGesture);return _super2.apply(this,arguments);}_createClass(ContinousBaseGesture,[{key:\"onUpdate\",value:function onUpdate(callback){this.handlers.onUpdate=callback;this.handlers.isWorklet[CALLBACK_TYPE.UPDATE]=this.isWorklet(callback);return this;}},{key:\"onChange\",value:function onChange(callback){this.handlers.onChange=callback;this.handlers.isWorklet[CALLBACK_TYPE.CHANGE]=this.isWorklet(callback);return this;}},{key:\"manualActivation\",value:function manualActivation(_manualActivation){this.config.manualActivation=_manualActivation;return this;}}]);return ContinousBaseGesture;}(BaseGesture);","map":{"version":3,"sources":["gesture.ts"],"names":["CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","nextGestureId","gestureId","handlerTag","isWorklet","constructor","addDependency","value","Array","withRef","callback","onBegin","onStart","onEnd","onFinalize","onTouchesDown","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","runOnJS","simultaneousWithExternalGesture","requireExternalGestureToFail","withTestId","cancelsTouchesInView","initialize","getNextHandlerTag","toGestureArray","prepare","shouldUseReanimated","isRemoteDebuggingEnabled","onUpdate","onChange","manualActivation"],"mappings":"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","sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // use Reanimated when runOnJS isn't set explicitly,\n    // and all defined callbacks are worklets,\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}