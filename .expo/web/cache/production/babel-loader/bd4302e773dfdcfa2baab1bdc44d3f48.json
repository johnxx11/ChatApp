{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"state\"];import*as React from'react';export var CHILD_STATE=Symbol('CHILD_STATE');export default function useRouteCache(routes){var cache=React.useMemo(function(){return{current:new Map()};},[]);if(process.env.NODE_ENV==='production'){return routes;}cache.current=routes.reduce(function(acc,route){var previous=cache.current.get(route);if(previous){acc.set(route,previous);}else{var state=route.state,proxy=_objectWithoutProperties(route,_excluded);Object.defineProperty(proxy,CHILD_STATE,{enumerable:false,value:state});acc.set(route,proxy);}return acc;},new Map());return Array.from(cache.current.values());}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["React","CHILD_STATE","Symbol","useRouteCache","routes","cache","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","state","proxy","Object","defineProperty","enumerable","value","Array","from","values"],"mappings":"6GAKA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAWA,MAAO,IAAMC,YAAW,CAAGC,MAAM,CAAC,aAAD,CAA1B,CAMP,cAAe,SAASC,cAAT,CACbC,MADa,CAEb,CAEA,GAAMC,MAAK,CAAGL,KAAK,CAACM,OAANN,CAAc,iBAAO,CAAEO,OAAO,CAAE,GAAIC,IAAJ,EAAX,CAAP,EAAdR,CAA4D,EAA5DA,CAAd,CAEA,GAAIS,OAAO,CAACC,GAARD,CAAYE,QAAZF,GAAyB,YAA7B,CAA2C,CAEzC,MAAOL,OAAP,CACF,CAEAC,KAAK,CAACE,OAANF,CAAgBD,MAAM,CAACQ,MAAPR,CAAc,SAACS,GAAD,CAAMC,KAAN,CAAgB,CAC5C,GAAMC,SAAQ,CAAGV,KAAK,CAACE,OAANF,CAAcW,GAAdX,CAAkBS,KAAlBT,CAAjB,CAEA,GAAIU,QAAJ,CAAc,CAEZF,GAAG,CAACI,GAAJJ,CAAQC,KAARD,CAAeE,QAAfF,EACD,CAHD,IAGO,CACL,GAAQK,MAAR,CAA4BJ,KAA5B,CAAQI,KAAR,CAAkBC,KAAlB,0BAA4BL,KAA5B,YAEAM,MAAM,CAACC,cAAPD,CAAsBD,KAAtBC,CAA6BnB,WAA7BmB,CAA0C,CACxCE,UAAU,CAAE,KAD4B,CAExCC,KAAK,CAAEL,KAFiC,CAA1CE,EAKAP,GAAG,CAACI,GAAJJ,CAAQC,KAARD,CAAeM,KAAfN,EACF,CAEA,MAAOA,IAAP,CACD,CAlBeT,CAkBb,GAAII,IAAJ,EAlBaJ,CAAhBC,CAoBA,MAAOmB,MAAK,CAACC,IAAND,CAAWnB,KAAK,CAACE,OAANF,CAAcqB,MAAdrB,EAAXmB,CAAP,CACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache(routes) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({\n    current: new Map()\n  }), []);\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const {\n        state,\n        ...proxy\n      } = route;\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}\n//# sourceMappingURL=useRouteCache.js.map"]},"metadata":{},"sourceType":"module"}