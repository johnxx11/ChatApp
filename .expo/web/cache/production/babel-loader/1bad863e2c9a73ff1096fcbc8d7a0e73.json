{"ast":null,"code":"import{CHILD_STATE}from\"./useRouteCache\";export default function getFocusedRouteNameFromRoute(route){var _route$CHILD_STATE,_state$index;var state=(_route$CHILD_STATE=route[CHILD_STATE])!=null?_route$CHILD_STATE:route.state;var params=route.params;var routeName=state?state.routes[(_state$index=state.index)!=null?_state$index:typeof state.type==='string'&&state.type!=='stack'?0:state.routes.length-1].name:typeof(params===null||params===void 0?void 0:params.screen)==='string'?params.screen:undefined;return routeName;}","map":{"version":3,"sources":["getFocusedRouteNameFromRoute.tsx"],"names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","state","params","routeName","routes","index","type","length","name","screen","undefined"],"mappings":"AAEA,OAASA,WAAT,uBAEA,cAAe,SAASC,6BAAT,CACbC,KADa,CAEO,qCAEpB,GAAMC,MAAK,qBAAGD,KAAK,CAACF,WAAD,CAAR,2BAAyBE,KAAK,CAACC,KAA1C,CACA,GAAMC,OAAM,CAAGF,KAAK,CAACE,MAArB,CAEA,GAAMC,UAAS,CAAGF,KAAK,CAEnBA,KAAK,CAACG,MAANH,eAGEA,KAAK,CAACI,KAHRJ,qBAIK,MAAOA,MAAK,CAACK,IAAb,GAAsB,QAAtB,EAAkCL,KAAK,CAACK,IAANL,GAAe,OAAjD,CACG,CADH,CAEGA,KAAK,CAACG,MAANH,CAAaM,MAAbN,CAAsB,CAN9BA,EAOEO,IATiB,CAWrB,OAAON,MAAM,GAAA,IAANA,EAAAA,MAAM,GAAA,IAAA,EAANA,CAAM,IAAA,EAANA,CAAAA,MAAM,CAAEO,MAAf,IAA0B,QAA1B,CACEP,MAAM,CAACO,MADT,CAEEC,SAbJ,CAeA,MAAOP,UAAP,CACF","sourceRoot":"../../src","sourcesContent":["import { CHILD_STATE } from './useRouteCache';\nexport default function getFocusedRouteNameFromRoute(route) {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params;\n  const routeName = state ?\n  // Get the currently active route name in the nested navigator\n  state.routes[\n  // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n  // If state doesn't exist, we need to default to `screen` param if available\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}\n//# sourceMappingURL=getFocusedRouteNameFromRoute.js.map"]},"metadata":{},"sourceType":"module"}