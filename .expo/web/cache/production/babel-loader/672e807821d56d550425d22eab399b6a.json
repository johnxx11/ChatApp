{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as queryString from'query-string';import fromEntries from\"./fromEntries\";import validatePathConfig from\"./validatePathConfig\";var getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};export default function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){validatePathConfig(options);}var configs=options!==null&&options!==void 0&&options.screens?createNormalizedConfigs(options===null||options===void 0?void 0:options.screens):{};var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern;var focusedParams;var focusedRoute=getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;var _loop2=function _loop2(){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){var stringify=(_currentOptions$route=currentOptions[route.name])===null||_currentOptions$route===void 0?void 0:_currentOptions$route.stringify;var currentParams=fromEntries(Object.entries(route.params).map(function(_ref){var _ref3=_slicedToArray(_ref,2),key=_ref3[0],value=_ref3[1];return[key,stringify!==null&&stringify!==void 0&&stringify[key]?stringify[key](value):String(value)];}));if(pattern){Object.assign(allParams,currentParams);}if(focusedRoute===route){focusedParams=_objectSpread({},currentParams);(_pattern=pattern)===null||_pattern===void 0?void 0:_pattern.split('/').filter(function(p){return p.startsWith(':');}).forEach(function(p){var name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}};while(route.name in currentOptions&&hasNext){_loop2();}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(function(p){var name=getParamName(p);if(p==='*'){return route.name;}if(p.startsWith(':')){var value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return encodeURIComponent(value);}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=\"?\"+query;}}current=route.state;};while(current){var _currentOptions$route,_pattern;_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;return path;}var getParamName=function getParamName(pattern){return pattern.replace(/^:/,'').replace(/\\?$/,'');};var joinPaths=function joinPaths(){var _ref4;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref4=[]).concat.apply(_ref4,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(config,parentPattern){var _pattern2;if(typeof config==='string'){var _pattern3=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern3};}var pattern;if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:(_pattern2=pattern)===null||_pattern2===void 0?void 0:_pattern2.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return fromEntries(Object.entries(options).map(function(_ref2){var _ref5=_slicedToArray(_ref2,2),name=_ref5[0],c=_ref5[1];var result=createConfigItem(c,pattern);return[name,result];}));};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["queryString","fromEntries","validatePathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","configs","screens","createNormalizedConfigs","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","Object","entries","map","key","value","String","assign","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c","result"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as queryString from 'query-string';\nimport fromEntries from './fromEntries';\nimport validatePathConfig from './validatePathConfig';\nconst getActiveRoute = state => {\n  const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  let path = '/';\n  let current = state;\n  const allParams = {};\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index];\n    let pattern;\n    let focusedParams;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n    let hasNext = true;\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        var _currentOptions$route;\n        const stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n        const currentParams = fromEntries(Object.entries(route.params).map(_ref => {\n          let [key, value] = _ref;\n          return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n        }));\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n        if (focusedRoute === route) {\n          var _pattern;\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = {\n            ...currentParams\n          };\n          (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(p => p.startsWith(':'))\n          // eslint-disable-next-line no-loop-func\n          .forEach(p => {\n            const name = getParamName(p);\n\n            // Remove the params present in the pattern since we'll only use the rest for query string\n            if (focusedParams) {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[name];\n            }\n          });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(p => {\n        const name = getParamName(p);\n\n        // We don't know what to show for wildcard patterns\n        // Showing the route name seems ok, though whatever we show here will be incorrect\n        // Since the page doesn't actually exist\n        if (p === '*') {\n          return route.name;\n        }\n\n        // If the path has a pattern for a param, put the param in the path\n        if (p.startsWith(':')) {\n          const value = allParams[name];\n          if (value === undefined && p.endsWith('?')) {\n            // Optional params without value assigned in route.params should be ignored\n            return '';\n          }\n          return encodeURIComponent(value);\n        }\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n      const query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nconst getParamName = pattern => pattern.replace(/^:/, '').replace(/\\?$/, '');\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst createConfigItem = (config, parentPattern) => {\n  var _pattern2;\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern\n    };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern;\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens\n  };\n};\nconst createNormalizedConfigs = (options, pattern) => fromEntries(Object.entries(options).map(_ref2 => {\n  let [name, c] = _ref2;\n  const result = createConfigItem(c, pattern);\n  return [name, result];\n}));\n//# sourceMappingURL=getPathFromState.js.map"]},"metadata":{},"sourceType":"module"}